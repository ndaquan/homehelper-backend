const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const nodemailer = require('nodemailer');
const User = require('../models/User');
const { OAuth2Client } = require('google-auth-library');

// In-memory token stores (replace with DB storage for production)
const resetTokens = new Map(); // email -> token

async function createTransporter() {
  const { SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, SMTP_SECURE, SMTP_TLS_REJECT_UNAUTHORIZED, SMTP_IGNORE_TLS, NODE_ENV } = process.env;
  if (!SMTP_HOST || !SMTP_USER || !SMTP_PASS) {
    console.warn('‚ö†Ô∏è SMTP not configured, emails will be logged to console.');
    return null;
  }
  const port = Number(SMTP_PORT || 587);
  const secure = typeof SMTP_SECURE !== 'undefined'
    ? String(SMTP_SECURE).toLowerCase() === 'true'
    : port === 465;
  const rejectUnauthorized = typeof SMTP_TLS_REJECT_UNAUTHORIZED !== 'undefined'
    ? String(SMTP_TLS_REJECT_UNAUTHORIZED).toLowerCase() === 'true'
    : true;
  const ignoreTLS = typeof SMTP_IGNORE_TLS !== 'undefined'
    ? String(SMTP_IGNORE_TLS).toLowerCase() === 'true'
    : false;

  const transportConfig = {
    host: SMTP_HOST,
    port,
    secure,
    auth: { user: SMTP_USER, pass: SMTP_PASS },
    tls: { rejectUnauthorized },
    ignoreTLS
  };

  if (NODE_ENV === 'development') {
    console.log('‚úâÔ∏è SMTP config:', {
      host: transportConfig.host,
      port: transportConfig.port,
      secure: transportConfig.secure,
      ignoreTLS: transportConfig.ignoreTLS,
      tls: transportConfig.tls
    });
  }

  return nodemailer.createTransport(transportConfig);
}

async function sendEmail({ to, subject, html }) {
  const transporter = await createTransporter();
  if (!transporter) {
    console.log(`\nüìß Mock email to: ${to}\nSubject: ${subject}\n${html}\n`);
    return true;
  }
  const from = process.env.MAIL_FROM || 'HomeHelper <no-reply@homehelper.local>';
  await transporter.sendMail({ from, to, subject, html });
  return true;
}

// T·∫°o JWT token
const generateToken = (userId, role) => {
  return jwt.sign(
    { userId, role },
    process.env.JWT_SECRET,
    { expiresIn: process.env.JWT_EXPIRES_IN || '24h' }
  );
};

// Google OAuth client (lazy init)
let googleClient = null;
function getGoogleClient() {
  if (!googleClient) {
    const clientId = process.env.GOOGLE_CLIENT_ID;
    if (!clientId) {
      throw new Error('GOOGLE_CLIENT_ID is not configured');
    }
    googleClient = new OAuth2Client(clientId);
  }
  return googleClient;
}

// ƒêƒÉng k√Ω user m·ªõi
const register = async (req, res) => {
  try {
    const { name, email, password, role, phone } = req.body;

    // Validation
    if (!name || !email || !password || !role) {
      return res.status(400).json({
        error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc',
        required: ['name', 'email', 'password', 'role']
      });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findByEmail(email);
    if (existingUser) {
      return res.status(400).json({
        error: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      });
    }

    // Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ['Admin', 'Tasker', 'Customer', 'Guest'];
    if (!validRoles.includes(role)) {
      return res.status(400).json({
        error: 'Role kh√¥ng h·ª£p l·ªá',
        validRoles
      });
    }

    // T·∫°o user m·ªõi
    const newUser = await User.create({
      name,
      email,
      password,
      role,
      phone
    });

    // T·∫°o token ngay sau khi ƒëƒÉng k√Ω th√†nh c√¥ng
    const token = generateToken(newUser.user_id, newUser.role);

    // Tr·∫£ v·ªÅ response v·ªõi token ƒë·ªÉ user c√≥ th·ªÉ ƒëƒÉng nh·∫≠p lu√¥n
    res.status(201).json({
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
      user: {
        user_id: newUser.user_id,
        name: newUser.name,
        email: newUser.email,
        role: newUser.role,
        phone: newUser.phone,
        created_at: newUser.created_at
      },
      token
    });

  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', error);
    res.status(500).json({
      error: 'L·ªói server n·ªôi b·ªô',
      message: error.message
    });
  }
};

// ƒêƒÉng nh·∫≠p
const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Validation
    if (!email || !password) {
      return res.status(400).json({
        error: 'Thi·∫øu email ho·∫∑c password'
      });
    }

    // T√¨m user theo email
    const user = await User.findByEmail(email);
    if (!user) {
      return res.status(401).json({
        error: 'Email ho·∫∑c password kh√¥ng ƒë√∫ng'
      });
    }

    // Ki·ªÉm tra password
    const isValidPassword = await User.verifyPassword(password, user.password);
    if (!isValidPassword) {
      return res.status(401).json({
        error: 'Email ho·∫∑c password kh√¥ng ƒë√∫ng'
      });
    }

    // B·ªè ki·ªÉm tra email verification - cho ph√©p ƒëƒÉng nh·∫≠p lu√¥n

    // T·∫°o token
    const token = generateToken(user.user_id, user.role);

    // Tr·∫£ v·ªÅ response
    res.status(200).json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
      user: {
        user_id: user.user_id,
        name: user.name,
        email: user.email,
        role: user.role,
        phone: user.phone,
        cccd_status: user.cccd_status,
        created_at: user.created_at
      },
      token
    });

  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({
      error: 'L·ªói server n·ªôi b·ªô',
      message: error.message
    });
  }
};

// L·∫•y th√¥ng tin user hi·ªán t·∫°i
const getCurrentUser = async (req, res) => {
  try {
    const userId = req.user.userId;
    
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        error: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    res.status(200).json({
      user: {
        user_id: user.user_id,
        name: user.name,
        email: user.email,
        role: user.role,
        phone: user.phone,
        cccd_status: user.cccd_status,
        cccd_url: user.cccd_url,
        created_at: user.created_at,
        updated_at: user.updated_at
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y th√¥ng tin user:', error);
    res.status(500).json({
      error: 'L·ªói server n·ªôi b·ªô',
      message: error.message
    });
  }
};

// ƒê·ªïi password
const changePassword = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { currentPassword, newPassword } = req.body;

    // Validation
    if (!currentPassword || !newPassword) {
      return res.status(400).json({
        error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc'
      });
    }

    // L·∫•y user v·ªõi password
    const user = await User.findByEmail(req.user.email);
    if (!user) {
      return res.status(404).json({
        error: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    // Ki·ªÉm tra password hi·ªán t·∫°i
    const isValidPassword = await User.verifyPassword(currentPassword, user.password);
    if (!isValidPassword) {
      return res.status(400).json({
        error: 'Password hi·ªán t·∫°i kh√¥ng ƒë√∫ng'
      });
    }

    // C·∫≠p nh·∫≠t password m·ªõi
    await User.updatePassword(userId, newPassword);

    res.status(200).json({
      message: 'ƒê·ªïi password th√†nh c√¥ng!'
    });

  } catch (error) {
    console.error('‚ùå L·ªói ƒë·ªïi password:', error);
    res.status(500).json({
      error: 'L·ªói server n·ªôi b·ªô',
      message: error.message
    });
  }
};

// Qu√™n password (g·ª≠i email reset)
const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        error: 'Vui l√≤ng nh·∫≠p email'
      });
    }

    // Ki·ªÉm tra email t·ªìn t·∫°i
    const user = await User.findByEmail(email);
    if (!user) {
      return res.status(404).json({
        error: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'
      });
    }

    // T·∫°o token reset v√† g·ª≠i email
    const token = crypto.randomBytes(32).toString('hex');
    resetTokens.set(email, token);
    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;

    await sendEmail({
      to: email,
      subject: 'Reset your HomeHelper password',
      html: `<p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n.</p><p>Nh·∫•n v√†o li√™n k·∫øt sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: <a href="${resetUrl}">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a></p><p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, c√≥ th·ªÉ b·ªè qua email n√†y.</p>`
    });

    res.status(200).json({
      message: 'ƒê√£ g·ª≠i email reset password. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.'
    });

  } catch (error) {
    console.error('‚ùå L·ªói qu√™n password:', error);
    res.status(500).json({
      error: 'L·ªói server n·ªôi b·ªô',
      message: error.message
    });
  }
};

// Reset password
const resetPassword = async (req, res) => {
  try {
    const { email, token, newPassword } = req.body;

    if (!email || !token || !newPassword) {
      return res.status(400).json({
        error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc'
      });
    }
    const stored = resetTokens.get(email);
    if (!stored || stored !== token) {
      return res.status(400).json({ error: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    const user = await User.findByEmail(email);
    if (!user) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y user' });
    }

    await User.updatePassword(user.user_id, newPassword);
    resetTokens.delete(email);

    res.status(200).json({
      message: 'Reset password th√†nh c√¥ng!'
    });

  } catch (error) {
    console.error('‚ùå L·ªói reset password:', error);
    res.status(500).json({
      error: 'L·ªói server n·ªôi b·ªô',
      message: error.message
    });
  }
};

// X√°c minh email
const verifyEmail = async (req, res) => {
  try {
    const { email, token } = req.query;
    if (!email || !token) {
      return res.status(400).json({ error: 'Thi·∫øu tham s·ªë' });
    }
    const stored = verificationTokens.get(email);
    if (!stored || stored !== token) {
      return res.status(400).json({ error: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i email ƒë√£ x√°c minh
    const user = await User.findByEmail(email);
    if (!user) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y user' });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i email ƒë√£ x√°c minh trong memory
    emailVerificationStatus.set(email, { verified: true, userId: user.user_id });
    
    // X√≥a token verification
    verificationTokens.delete(email);
    
    // T·∫°o JWT token sau khi x√°c minh th√†nh c√¥ng
    const authToken = generateToken(user.user_id, user.role);
    
    res.status(200).json({ 
      message: 'X√°c minh email th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.',
      token: authToken,
      user: {
        user_id: user.user_id,
        name: user.name,
        email: user.email,
        role: user.role,
        phone: user.phone,
        created_at: user.created_at
      }
    });
  } catch (error) {
    console.error('‚ùå L·ªói x√°c minh email:', error);
    res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô', message: error.message });
  }
};

module.exports = {
  register,
  login,
  getCurrentUser,
  changePassword,
  forgotPassword,
  resetPassword,
  verifyEmail,
  // Google login handler will be attached below
};

// ƒêƒÉng nh·∫≠p v·ªõi Google
module.exports.loginWithGoogle = async (req, res) => {
  try {
    const { idToken } = req.body;
    if (!idToken) {
      return res.status(400).json({ error: 'Thi·∫øu idToken' });
    }

    const client = getGoogleClient();
    const ticket = await client.verifyIdToken({
      idToken,
      audience: process.env.GOOGLE_CLIENT_ID
    });
    const payload = ticket.getPayload();
    const email = payload.email;
    const name = payload.name || payload.given_name || 'Google User';

    // T√¨m user theo email
    let user = await User.findByEmail(email);

    // N·∫øu ch∆∞a c√≥ th√¨ t·∫°o user m·ªõi v·ªõi role m·∫∑c ƒë·ªãnh 'Customer'
    if (!user) {
      const tempPassword = crypto.randomBytes(16).toString('hex');
      const newUser = await User.create({
        name,
        email,
        password: tempPassword,
        role: 'Customer',
        phone: null
      });
      user = newUser;
    }

    const token = generateToken(user.user_id, user.role);

    res.status(200).json({
      message: 'ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!',
      user: {
        user_id: user.user_id,
        name: user.name,
        email: user.email,
        role: user.role,
        phone: user.phone || null,
        created_at: user.created_at || new Date()
      },
      token
    });
  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p Google:', error);
    res.status(500).json({ error: 'L·ªói server n·ªôi b·ªô', message: error.message });
  }
};
